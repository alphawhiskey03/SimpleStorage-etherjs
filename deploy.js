const ethers = require('ethers')
const fs = require('fs-extra')
require('dotenv').config()
async function main() {
    //Provide the RCP url of the blockhain node
    console.log('Hello, world!')
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL)

    // connecting to the wallet with the private key
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider)

    // connecting to wallet with encrypted private Key
    // const encryptedJson = fs.readFileSync('./.encryptedKey.json', 'utf8')
    // let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    //     encryptedJson,
    //     process.env.PRIVATE_KEY_PASSWORD
    // )

    // wallet = await wallet.connect(provider)

    // getting the abi
    const abi = fs.readFileSync('./SimpleStorage_sol_SimpleStorage.abi', 'utf8')
    // getting binary
    const binary = fs.readFileSync(
        './SimpleStorage_sol_SimpleStorage.bin',
        'utf8'
    )

    const contractFactory = new ethers.ContractFactory(abi, binary, wallet)
    console.log('Deploying the contract...')
    const contract = await contractFactory.deploy()

    await contract.deployTransaction.wait(1)
    console.log(contract.address)
    const currentFavoriteNumber = await contract.retreive()
    console.log(`current favorite number : ${currentFavoriteNumber.toString()}`)

    const transactionResponse = await contract.store('10')
    const transactionRecipt = await transactionResponse.wait(1)

    const updatedFavoriteNumber = await contract.retreive()
    console.log(`current favorite number : ${updatedFavoriteNumber.toString()}`)
    // Sending a raw transaction
    // here nonce is just the transaction count the - the number of blocks mined
    // const nonce = await wallet.getTransactionCount();
    // console.log(nonce);
    // console.log("//////////");
    // const tx = {
    //   nonce: nonce,
    //   gasPrice: 20000000000,
    //   gasLimit: 6721975,
    //   to: null,
    //   value: 0,
    //   data: "0x608060405234801561001057600080fd5b50610841806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806343ec8f47146100675780636057361d146100975780639683bc9d146100b35780639e7a13ad146100d1578063a2a8f57b14610102578063c7a0d9f61461011e575b600080fd5b610081600480360381019061007c9190610494565b61013c565b60405161008e91906105f0565b60405180910390f35b6100b160048036038101906100ac91906104dd565b61016a565b005b6100bb610174565b6040516100c891906105f0565b60405180910390f35b6100eb60048036038101906100e691906104dd565b61017d565b6040516100f992919061060b565b60405180910390f35b61011c6004803603810190610117919061050a565b610239565b005b610126610310565b60405161013391906105f0565b60405180910390f35b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b8060008190555050565b60008054905090565b6001818154811061018d57600080fd5b90600052602060002090600202016000915090508060000154908060010180546101b690610704565b80601f01602080910402602001604051908101604052809291908181526020018280546101e290610704565b801561022f5780601f106102045761010080835404028352916020019161022f565b820191906000526020600020905b81548152906001019060200180831161021257829003601f168201915b5050505050905082565b6001604051806040016040528085815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906102e3929190610316565b50505082600283836040516102f99291906105d7565b908152602001604051809103902081905550505050565b60005481565b82805461032290610704565b90600052602060002090601f016020900481019282610344576000855561038b565b82601f1061035d57805160ff191683800117855561038b565b8280016001018555821561038b579182015b8281111561038a57825182559160200191906001019061036f565b5b509050610398919061039c565b5090565b5b808211156103b557600081600090555060010161039d565b5090565b60006103cc6103c784610660565b61063b565b9050828152602081018484840111156103e8576103e76107d4565b5b6103f38482856106c2565b509392505050565b60008083601f840112610411576104106107ca565b5b8235905067ffffffffffffffff81111561042e5761042d6107c5565b5b60208301915083600182028301111561044a576104496107cf565b5b9250929050565b600082601f830112610466576104656107ca565b5b81356104768482602086016103b9565b91505092915050565b60008135905061048e816107f4565b92915050565b6000602082840312156104aa576104a96107de565b5b600082013567ffffffffffffffff8111156104c8576104c76107d9565b5b6104d484828501610451565b91505092915050565b6000602082840312156104f3576104f26107de565b5b60006105018482850161047f565b91505092915050565b600080600060408486031215610523576105226107de565b5b60006105318682870161047f565b935050602084013567ffffffffffffffff811115610552576105516107d9565b5b61055e868287016103fb565b92509250509250925092565b600061057683856106ad565b93506105838385846106c2565b82840190509392505050565b600061059a82610691565b6105a4818561069c565b93506105b48185602086016106d1565b6105bd816107e3565b840191505092915050565b6105d1816106b8565b82525050565b60006105e482848661056a565b91508190509392505050565b600060208201905061060560008301846105c8565b92915050565b600060408201905061062060008301856105c8565b8181036020830152610632818461058f565b90509392505050565b6000610645610656565b90506106518282610736565b919050565b6000604051905090565b600067ffffffffffffffff82111561067b5761067a610796565b5b610684826107e3565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156106ef5780820151818401526020810190506106d4565b838111156106fe576000848401525b50505050565b6000600282049050600182168061071c57607f821691505b602082108114156107305761072f610767565b5b50919050565b61073f826107e3565b810181811067ffffffffffffffff8211171561075e5761075d610796565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6107fd816106b8565b811461080857600080fd5b5056fea2646970667358221220c37777c6b91c5384643f72cb89b4a3791262003607d467856bef289809a7be6964736f6c63430008070033",
    //   chainId: 1337,
    // };
    // const sendTxResponse = await wallet.sendTransaction(tx);
    // console.log(sendTxResponse);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.log(error)
    })
